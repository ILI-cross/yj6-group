#영화 추천 알고리즘

1. 데이터생성

# 각 열의 길이를 맞추기 위해 결측치를 채움
df = pd.DataFrame({
    '기생충': [5, 1, 4, np.nan, np.nan, 4],
    '겨울왕국': [4, 0, 4.2, np.nan, 2, np.nan],
    '스파이더맨': [4, 1, np.nan, 1, 1.3, np.nan],
    '라라랜드': [3, np.nan, 5, 4.4, np.nan, np.nan],
    '미나리': [np.nan, 4, 3, 3, 3.1, np.nan]
})
df.index = ['유저1', '유저2', '유저3', '유저4', '유저5', '유저6']
df

2. 프레임 만들기
def cos_similiarity(v1, v2):
  #데이터 프레임화
  df= pd.DataFrame({'v1':v1, 'v2':v2})
  df=df.dropna()

  #v1 v2 재할당
  v1=df['v1']
  v2=df['v2']

  #유사도계싼
  dot_product = np.dot(v1,v2)
  l2_norm = (np.sqrt(sum(np.square(v1)))*np.sqrt(sum(np.square(v2))))
  similarity = dot_product/l2_norm
  return similarity
3. v1, v2 에 들어갈 거 할당
  v1=df.loc['유저1']
  v2=df.loc['유저2']

4. 둘의 유사도 확인하기
  cos_similiarity(v1,v2)

5. 유저 1과 유저2의 유사도 확인
  user1=['유저1']
  for user2 in df.index[df.index.isin(user1)==False]:
    print(str(user1[0])+"과 "+ str(user2)+ "의 유사도 : "+
          str(cos_similiarity(v1, df.loc[user2]))
          )

결과 - >
유저1과 유저2의 유사도 : 0.8429272304235245
유저1과 유저3의 유사도 : 0.9566383274232875
유저1과 유저4의 유사도 : 0.7623765963460505
유저1과 유저5의 유사도 : 0.9782341251024409
유저1과 유저6의 유 사도 : 1.0

2-1 
유저별 추천 함수
def recommend(user,df):
  #빈데이터 프레임 만듦
  df_cos=pd.DataFrame(columns=['cos_sim'])

  #조회하고자 하는 유저가 보지못한 아이템 뽑기
  recom_list=df.loc[df.index==user[0]]
  recom_list=recom_list[recom_list.columns[np.where(recom_list.isnull())[1]]]

  #유사도 탐색 및 데이터 저장
  for user2 in df.index[df.index.isin(user)==False]:
    df_cos.loc[user2]=cos_similiarity(df.loc[user[0]], df.loc[user2])

  #유사도 순 정렬
  df_cos=df_cos.sort_values(['cos_sim'],ascending=False)

  #추천 아이템에 대한 최종 output 정의
  user_best_sim_item=pd.DataFrame(columns=['recommend_score'])
  i=0
  #가장 높은 유사도 가지는 user 탐색한 결과, 그사람도 추천해야할 아이템을 보지 않은 경우, 다음으로 유사도가 높은 사람 추천
  while True:

    ##가장 높은 유사도 가지는 user 탐색
    user_best_sim=df_cos.index[i]

    #user_best_sim에서 나타난 유저 데이터(영화)에서 recom_list에 있는 데이터를 탐색
    user_best_sim_data=df.loc[user_best_sim]
    user_best_sim_data=pd.DataFrame(user_best_sim_data[user_best_sim_data.index.isin(recom_list.columns)])

    #칼럼명 재정의
    user_best_sim_data.columns=['recommend_score']

    for j in user_best_sim_data.index:
      if j in user_best_sim_item.index:
        continue
      user_best_sim_item.loc[j]=user_best_sim_data.loc[j]

    #만약, 결측치가 있으면 결측 제거 이후 되돌아감
    if user_best_sim_item['recommend_score'].isnull().sum()>0:
      user_best_sim_item=user_best_sim_item.dropna()#결측제거
      i=i+1
    else:
      break

  #점수가 높은 순으로 정렬
  user_best_sim_item=user_best_sim_item.sort_values(by='recommend_score',ascending=False)

  #최종 추천
#  return user_best_sim_item, user_best_sim_data[user_best_sim_data.index.isin(recom_list.columns)]
  return user_best_sim_item


2-2 유저 별 추천 확인
Ex) ->
        recommend(['유저1'],df)
        recommend(['유저2'],df)

